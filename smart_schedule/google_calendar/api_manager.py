from oauth2client import client
import httplib2
from apiclient import discovery
from datetime import datetime, timedelta, timezone
import pytz

from smart_schedule.models import Talk
from smart_schedule.settings import Session, REFRESH_ERROR


def get_credentials(talk_id):
    session = Session()
    with session.begin():
        talk = session.query(Talk).filter_by(talk_id=talk_id).one_or_none()
        if talk is None:
            return None
        credentials = client.OAuth2Credentials.from_json(talk.credential)
        if credentials.access_token_expired:
            print('認証の期限が切れています')
            http = credentials.authorize(httplib2.Http())
            try:
                credentials.refresh(http)
            except client.HttpAccessTokenRefreshError:
                print('リフレッシュエラーが起きました')
                session.delete(talk)
                print('ユーザーをDBから削除しました')
                return REFRESH_ERROR
            print('リフレッシュしました')
            talk.credential = credentials.to_json()
            print('新しい認証情報をDBに保存しました')
        return credentials


def build_service(credentials):
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('calendar', 'v3', http=http)
    return service


def remove_account(credentials, talk_id):
    # アカウント連携を解除
    try:
        credentials.revoke(httplib2.Http())
    except client.TokenRevokeError:
        print('既にアカウント連携が削除されています')

    # DBから削除
    session = Session()
    with session.begin():
        talk = session.query(Talk).filter_by(talk_id=talk_id).one()
        session.delete(talk)


# 現在からn日分のイベントを取得
def get_n_days_events(service, calendar_id, n):
    now = datetime.now(timezone.utc)
    period = timedelta(days=n)
    events_result = service.events().list(
        calendarId=calendar_id, timeMin=now.isoformat(),
        timeMax=(now + period).isoformat(), maxResults=100, singleEvents=True,
        orderBy='startTime').execute()
    events = events_result.get('items', [])
    return events


# 日付指定でイベントを取得
def get_events_by_date(service, calendar_id, date):
    # 何故かminute=19で調整しないと帳尻が合わなくなる（終日予定が複数の指定日にまたがってでマッチしてしまうなど)
    # Asia/Tokyoのタイムオフセットが09:19であることに起因すると思われる。
    dt = datetime(date.year, date.month, date.day, minute=19,
                  tzinfo=pytz.timezone('Asia/Tokyo'))
    events_result = service.events().list(
        calendarId=calendar_id, timeMin=dt.isoformat(),
        timeMax=(dt + timedelta(days=1)).isoformat(),
        maxResults=100, singleEvents=True, orderBy='startTime').execute()
    events = events_result.get('items', [])
    return events


# タイトル名で検索
def get_events_by_title(service, calendar_id, search_word):
    now = datetime.now(timezone.utc)
    events_result = service.events().list(
        calendarId=calendar_id, timeMin=now.isoformat(), maxResults=100,
        singleEvents=True, orderBy='startTime').execute()
    events = events_result.get('items', [])
    events = list(filter(lambda event: search_word in event['summary'], events))

    return events


# イベントを作成
def create_event(service, calendar_id, date, title):
    event_data = {
        'summary': title,
        'description': 'generated by Smart Schedule',
        'start': {
            'date': '{}-{}-{}'.format(date.year, date.month, date.day),
            'timeZone': 'Asia/Tokyo',
        },
        'end': {
            'date': '{}-{}-{}'.format(date.year, date.month, date.day),
            'timeZone': 'Asia/Tokyo',
        }
    }

    event = service.events().insert(calendarId=calendar_id, body=event_data).execute()
    return event


def get_calendar_list(service):
    calendar_list = service.calendarList().list().execute()
    return calendar_list
